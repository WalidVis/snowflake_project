#Documentation:
# https://github.com/marketplace/actions/hashicorp-setup-terraform
# https://registry.terraform.io/providers/Snowflake-Labs/snowflake

#########################
# !!!!! Terraform workspaces (on Terraform cloud) must have the ENV part of the name (PROD, TEST, DEV) in UPPER CASE !!!!
# (example: snowflake_project_workspace_TEST)

name: "CD"

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      ENVIRONMENT:
        description: 'Environment to deploy to (DEV, TEST, PROD !! only) (! UPPER case !)'
        required: false
        default: "TEST"  # Default for manual runs without quotes

#########################
# !!!!! Terraform workspaces (on Terraform cloud) must have the ENV part of the name (PROD, TEST, DEV) in UPPER CASE !!!!
# (example: snowflake_project_workspace_TEST)

jobs:
  snowflake-terraform-deploy:
    name: "Snowflake Terraform Job"
    runs-on: ubuntu-latest
    defaults:
        run:
            working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_vesion: "1.11.0"
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }} # generated on Terraform cloud platform

      # To avoid bug during CD, First run "terraform fmt" on local machine plz!
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
        
      - name: set test vars and select workspace
        id: testvar
        if: (github.ref == 'refs/heads/main' && github.event_name == 'push')
        run: cp ../vars/TEST.auto.tfvars var.auto.tfvars && terraform workspace select TEST
      
      - name: set vars and workspace(manual) 
        id: customvar
        if: github.event_name == 'workflow_dispatch'
        run: cp ../vars/${{ github.event.inputs.ENVIRONMENT }}.auto.tfvars var.auto.tfvars && terraform workspace select ${{ github.event.inputs.ENVIRONMENT }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        
      - name: Terraform Custom Plan
        id: custom_plan
        if: github.event_name == 'workflow_dispatch'
        run: terraform plan -no-color
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.custom_plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply 
        if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch')
        run: terraform apply -auto-approve

#####################################################################################################################
  
  # https://github.com/Snowflake-Labs/schemachange
  # https://quickstarts.snowflake.com/guide/devops_dcm_schemachange_github/#0
  
  schema-change-apply:
    runs-on: ubuntu-latest
    needs: snowflake-terraform-deploy
    defaults:
        run:
            working-directory: schemachange
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Python 3.8.x
        uses: actions/setup-python@v2.2.1
        with:
          python-version: 3.8.x

      - name: Run schemachange
        env:
          SF_ACCOUNT: ${{ secrets.SF_ACCOUNT }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SF_PASSWORD }}
        run: |
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          python --version
          echo "Step 1: Installing schemachange"
          pip install schemachange==4.0.1

      - name: EXECUTE schemachange for MERGE or MANUAL EXEC
        env:
          SF_ACCOUNT: ${{ secrets.SF_ACCOUNT }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SF_PASSWORD }}
        if: github.event_name == 'workflow_dispatch' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
        run: |
          echo "Running schemachange TO EXEC"
          if [[ "${{ github.ref }}" == "refs/heads/main" && ${{ github.event_name }} == 'push' ]]; then
            schemachange deploy --config-folder . --connections-file-path ./connection.toml  --connection-name TEST --vars '{"ENVIRONMENT": "TEST" }' -c TEST_POC_VISEO_DB.MONITORING_LAYER.CHANGE_HISTORY        
          else
            schemachange deploy --config-folder . --connections-file-path ./connection.toml  --connection-name "${{ github.event.inputs.ENVIRONMENT }}" --vars '{"ENVIRONMENT": ${{ github.event.inputs.ENVIRONMENT }} }' -c "${{ github.event.inputs.ENVIRONMENT }}"_POC_VISEO_DB.MONITORING_LAYER.CHANGE_HISTORY                
          fi

