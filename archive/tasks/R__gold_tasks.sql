/* ------------------------------------------------------------------------------
   File Name: 
      R__gold_tasks.sql

   Authors:
       Matthieu NOIRET

   Description: 
       This SQL script creates the tasks that serves as data pipelines to ingest
	   data from the silver to the gold layer.

   Schemas: 
       ORCHESTRATION_SCHEMA

   Objects Created:
       1. Tasks:
           - GLD_CURATE_PRC_BENCHMARK
           - GLD_CURATE_PRC_CAMPAIGN
		   - GLD_CURATE_PRC_CAMPAIGN_MARKET
		   - GLD_CURATE_PRC_CUSTOMER_ERP_PRICING_MARKET
		   - GLD_CURATE_PRC_GENERIC_GEOGRAPHY
		   - GLD_CURATE_PRC_GENERIC_PRODUCT
		   - GLD_CURATE_PRC_GEOGRAPHY
           
------------------------------------------------------------------------------- */

create or replace task ORCHESTRATION_SCHEMA.GLD_CURATE_PRC_BENCHMARK
	warehouse={{ ENVIRONMENT }}_WH
	after ORCHESTRATION_SCHEMA.SLV_CLEAN_PRC_BENCHMARK
	as MERGE INTO GOLD_LAYER.DIM_PRC_BENCHMARK_GLD T USING (
    SELECT
        PRCPCSBENCHMARKINTKEY AS PRCPCSBENCHMARKINTKEY,
        APUKCODE AS APUKCODE,
        ANABENCH2CODE AS ANABENCH2CODE,
        ANABENCH2 AS ANABENCH2,
        SKUGROUP AS SKUGROUP,
        SYS_DATE_CREATE
    FROM
        SILVER_LAYER.DIM_PRC_BENCHMARK_SLV
) S ON S.PRCPCSBENCHMARKINTKEY = T.PRCPCSBENCHMARKINTKEY
WHEN MATCHED AND S.SYS_DATE_CREATE > T.SYS_DATE_UPDATE THEN 
    UPDATE SET
        T.PRCPCSBENCHMARKINTKEY = S.PRCPCSBENCHMARKINTKEY,
        T.APUKCODE = S.APUKCODE,
        T.ANABENCH2CODE = S.ANABENCH2CODE,
        T.ANABENCH2 = S.ANABENCH2,
        T.SKUGROUP = S.SKUGROUP,
        T.SYS_DATE_UPDATE = CURRENT_TIMESTAMP
WHEN NOT MATCHED THEN INSERT (
   PRCPCSBENCHMARKINTKEY,
   APUKCODE,
   ANABENCH2CODE,
   ANABENCH2,
   SKUGROUP,
   SYS_DATE_CREATE,
   SYS_DATE_UPDATE
)
VALUES (
    S.PRCPCSBENCHMARKINTKEY,
    S.APUKCODE,
    S.ANABENCH2CODE,
    S.ANABENCH2,
    S.SKUGROUP,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
);

---------------------------------------------------
--------------------------------------------------------------------------
---------------------------------------------------

create or replace task ORCHESTRATION_SCHEMA.GLD_CURATE_PRC_CAMPAIGN
	warehouse={{ ENVIRONMENT }}_WH
	after ORCHESTRATION_SCHEMA.SLV_CLEAN_PRC_CAMPAIGN
	as MERGE INTO GOLD_LAYER.DIM_PRC_CAMPAIGN_GLD T USING (
    SELECT
        PRICINGCAMPAIGNPRCINTKEY AS PRCPCSCAMPAIGNINTKEY,
        HOUSEKEY AS HOUSEKEY,
        CAMPAIGNCODE AS CAMPAIGNCODE,
        CAMPAIGNNAME AS CAMPAIGNNAME,
        CAMPAIGNDESCRIPTION AS CAMPAIGNDESCRIPTION,
        HISTORICALSELLINFIRSTMONTH AS HISTORICALSELLINFIRSTMONTH,
        HISTORICALSELLINLASTMONTH AS HISTORICALSELLINLASTMONTH,
        CAMPAIGNDATE AS CAMPAIGNDATE,
        SYS_DATE_CREATE
    FROM
        SILVER_LAYER.DIM_PRC_CAMPAIGN_SLV
) S ON S.PRCPCSCAMPAIGNINTKEY = T.PRCPCSCAMPAIGNINTKEY
WHEN MATCHED AND S.SYS_DATE_CREATE > T.SYS_DATE_UPDATE THEN 
    UPDATE SET
        T.PRCPCSCAMPAIGNINTKEY = S.PRCPCSCAMPAIGNINTKEY,
        T.HOUSEKEY = S.HOUSEKEY,
        T.CAMPAIGNCODE = S.CAMPAIGNCODE,
        T.CAMPAIGNNAME = S.CAMPAIGNNAME,
        T.CAMPAIGNDESCRIPTION = S.CAMPAIGNDESCRIPTION,
        T.HISTORICALSELLINFIRSTMONTH = S.HISTORICALSELLINFIRSTMONTH,
        T.HISTORICALSELLINLASTMONTH = S.HISTORICALSELLINLASTMONTH,
        T.CAMPAIGNDATE = S.CAMPAIGNDATE,
        T.SYS_DATE_UPDATE = CURRENT_TIMESTAMP
WHEN NOT MATCHED THEN INSERT (
    PRCPCSCAMPAIGNINTKEY,
    HOUSEKEY,
    CAMPAIGNCODE,
    CAMPAIGNNAME,
    CAMPAIGNDESCRIPTION,
    HISTORICALSELLINFIRSTMONTH,
    HISTORICALSELLINLASTMONTH,
    CAMPAIGNDATE,
    SYS_DATE_CREATE,
    SYS_DATE_UPDATE
)
VALUES (
    S.PRCPCSCAMPAIGNINTKEY,
    S.HOUSEKEY,
    S.CAMPAIGNCODE,
    S.CAMPAIGNNAME,
    S.CAMPAIGNDESCRIPTION,
    S.HISTORICALSELLINFIRSTMONTH,
    S.HISTORICALSELLINLASTMONTH,
    S.CAMPAIGNDATE,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
);

---------------------------------------------------
--------------------------------------------------------------------------
---------------------------------------------------

create or replace task ORCHESTRATION_SCHEMA.GLD_CURATE_PRC_CAMPAIGN_MARKET
	warehouse={{ ENVIRONMENT }}_WH
	after ORCHESTRATION_SCHEMA.SLV_CLEAN_PRC_CAMPAIGN_MARKET
	as MERGE INTO GOLD_LAYER.DIM_PRC_CAMPAIGN_MARKET_GLD T USING (
    SELECT
        PRICINGCAMPAIGNMARKETPRCINTKEY AS PRCPCSCAMPAIGNMARKETINTKEY,
        HOUSEKEY AS HOUSEKEY,
        CAMPAIGNCODE AS CAMPAIGNCODE,
        PRICINGMARKETCODE AS PRICINGMARKETCODE,
        RATETYPE AS RATETYPE,
        RATEDATE AS RATEDATE,
        BASECAMPAIGNCODE AS BASECAMPAIGNCODE,
        SYS_DATE_CREATE
    FROM
        SILVER_LAYER.DIM_PRC_CAMPAIGN_MARKET_SLV
) S ON S.PRCPCSCAMPAIGNMARKETINTKEY = T.PRCPCSCAMPAIGNMARKETINTKEY
WHEN MATCHED AND S.SYS_DATE_CREATE > T.SYS_DATE_UPDATE THEN 
    UPDATE SET
        T.PRCPCSCAMPAIGNMARKETINTKEY = S.PRCPCSCAMPAIGNMARKETINTKEY,
        T.HOUSEKEY = S.HOUSEKEY,
        T.CAMPAIGNCODE = S.CAMPAIGNCODE,
        T.PRICINGMARKETCODE = S.PRICINGMARKETCODE,
        T.RATETYPE = S.RATETYPE,
        T.RATEDATE = S.RATEDATE,
        T.BASECAMPAIGNCODE = S.BASECAMPAIGNCODE,
        T.SYS_DATE_UPDATE = CURRENT_TIMESTAMP
WHEN NOT MATCHED THEN INSERT (
    PRCPCSCAMPAIGNMARKETINTKEY,
    HOUSEKEY,
    CAMPAIGNCODE,
    PRICINGMARKETCODE,
    RATETYPE,
    RATEDATE,
    BASECAMPAIGNCODE,
    SYS_DATE_CREATE,
    SYS_DATE_UPDATE
)
VALUES (
    S.PRCPCSCAMPAIGNMARKETINTKEY,
    S.HOUSEKEY,
    S.CAMPAIGNCODE,
    S.PRICINGMARKETCODE,
    S.RATETYPE,
    S.RATEDATE,
    S.BASECAMPAIGNCODE,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
);

---------------------------------------------------
--------------------------------------------------------------------------
---------------------------------------------------

create or replace task ORCHESTRATION_SCHEMA.GLD_CURATE_PRC_CUSTOMER_ERP_PRICING_MARKET
	warehouse={{ ENVIRONMENT }}_WH
	after ORCHESTRATION_SCHEMA.SLV_CLEAN_PRC_CUSTOMER_ERP_PRICING_MARKET
	as MERGE INTO GOLD_LAYER.DIM_PRC_CUSTOMER_ERP_PRICING_MARKET_GLD T USING (
    SELECT
        PRICINGCUSTOMERERPPRICINGMARKETPRCINTKEY AS PRICINGCUSTOMERERPPRICINGMARKETPRCINTKEY,
        HOUSEKEY AS HOUSEKEY,
        CUSTOMERCODE AS CUSTOMERCODE,
        PRICINGMARKETCODE AS PRICINGMARKETCODE,
        SYS_DATE_CREATE
    FROM
        SILVER_LAYER.DIM_PRC_CUSTOMER_ERP_PRICING_MARKET_SLV
) S ON S.PRICINGCUSTOMERERPPRICINGMARKETPRCINTKEY = T.PRICINGCUSTOMERERPPRICINGMARKETPRCINTKEY
WHEN MATCHED AND S.SYS_DATE_CREATE > T.SYS_DATE_UPDATE THEN 
    UPDATE SET
        T.PRICINGCUSTOMERERPPRICINGMARKETPRCINTKEY = S.PRICINGCUSTOMERERPPRICINGMARKETPRCINTKEY,
        T.HOUSEKEY = S.HOUSEKEY,
        T.CUSTOMERCODE = S.CUSTOMERCODE,
        T.PRICINGMARKETCODE = S.PRICINGMARKETCODE,
        T.SYS_DATE_UPDATE = CURRENT_TIMESTAMP
WHEN NOT MATCHED THEN INSERT (
    PRICINGCUSTOMERERPPRICINGMARKETPRCINTKEY,
    HOUSEKEY,
    CUSTOMERCODE,
    PRICINGMARKETCODE,
    SYS_DATE_CREATE,
    SYS_DATE_UPDATE
)
VALUES (
    S.PRICINGCUSTOMERERPPRICINGMARKETPRCINTKEY,
    S.HOUSEKEY,
    S.CUSTOMERCODE,
    S.PRICINGMARKETCODE,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
);

---------------------------------------------------
--------------------------------------------------------------------------
---------------------------------------------------

create or replace task ORCHESTRATION_SCHEMA.GLD_CURATE_PRC_GENERIC_GEOGRAPHY
	warehouse={{ ENVIRONMENT }}_WH
	after ORCHESTRATION_SCHEMA.SLV_CLEAN_PRC_GENERIC_GEOGRAPHY
	as MERGE INTO GOLD_LAYER.DIM_PRC_GENERIC_GEOGRAPHY_GLD T USING (
    SELECT
        PRICINGGENERICGEOGRAPHYPRCINTKEY AS PRCPCSGENERICGEOGRAPHYINTKEY,
        AGUKCODE AS AGUKCODE,
        CREATIONDATE AS AGUKCREATIONDATE,
        SHORTNAME AS AGUKSHORTNAME,
        AREAKEY AS AREAKEY,
        AREANAME AS AREANAME,
        DISTRIBUTIONCHANNEL AS DISTRIBUTIONCHANNEL,
        ISOCOUNTRYCODE AS ISOCOUNTRYCODE,
        TOUCHPOINT AS TOUCHPOINT,
        SYS_DATE_CREATE
    FROM
        SILVER_LAYER.DIM_PRC_GENERIC_GEOGRAPHY_SLV
) S ON S.PRCPCSGENERICGEOGRAPHYINTKEY = T.PRCPCSGENERICGEOGRAPHYINTKEY
WHEN MATCHED AND S.SYS_DATE_CREATE > T.SYS_DATE_UPDATE THEN 
    UPDATE SET
        T.PRCPCSGENERICGEOGRAPHYINTKEY = S.PRCPCSGENERICGEOGRAPHYINTKEY,
        T.AGUKCODE = S.AGUKCODE,
        T.AGUKCREATIONDATE = S.AGUKCREATIONDATE,
        T.AGUKSHORTNAME = S.AGUKSHORTNAME,
        T.AREAKEY = S.AREAKEY,
        T.AREANAME = S.AREANAME,
        T.DISTRIBUTIONCHANNEL = S.DISTRIBUTIONCHANNEL,
        T.ISOCOUNTRYCODE = S.ISOCOUNTRYCODE,
        T.TOUCHPOINT = S.TOUCHPOINT,
        T.SYS_DATE_UPDATE = CURRENT_TIMESTAMP
WHEN NOT MATCHED THEN INSERT (
    PrcPcsGenericGeographyIntKey,
    AgukCode,
    AgukCreationDate,
    AgukShortName,
    AreaKey,
    AreaName,
    DistributionChannel,
    ISOCountryCode,
    Touchpoint,
    SYS_DATE_CREATE,
    SYS_DATE_UPDATE
)
VALUES (
    S.PRCPCSGENERICGEOGRAPHYINTKEY,
    S.AGUKCODE,
    S.AGUKCREATIONDATE,
    S.AGUKSHORTNAME,
    S.AREAKEY,
    S.AREANAME,
    S.DISTRIBUTIONCHANNEL,
    S.ISOCOUNTRYCODE,
    S.TOUCHPOINT,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
);

---------------------------------------------------
--------------------------------------------------------------------------
---------------------------------------------------

create or replace task ORCHESTRATION_SCHEMA.GLD_CURATE_PRC_GENERIC_PRODUCT
	warehouse={{ ENVIRONMENT }}_WH
	after ORCHESTRATION_SCHEMA.SLV_CLEAN_PRC_GENERIC_PRODUCT
	as MERGE INTO GOLD_LAYER.DIM_PRC_GENERIC_PRODUCT_GLD T USING (
    SELECT
        PRICINGGENERICPRODUCTPRCINTKEY AS PRCPCSGENERICPRODUCTINTKEY,
        APUKCODE AS APUKCODE,
        APUKHOUSESWITCHCODE AS APUKHOUSESWITCHCODE,
        APUKHOUSESWITCHDATE AS APUKHOUSESWITCHDATE,
        SHORTNAME AS SHORTNAME,
        ISINTERNAL AS ISINTERNAL,
        PRICINGREFCODE AS PRICINGREFCODE,
        ISINNOVATION AS ISINNOVATION,
        SIZE AS SIZE,
        UNIT AS UNIT,
        PANELCOMMERCIALLINEKEY AS PANELCOMMERCIALLINEKEY,
        PANELSUBSEGMENTKEY AS PANELSUBSEGMENTKEY,
        ISACTIVE AS ISACTIVE,
        LOGDESCRIPTION AS LOGDESCRIPTION,
        CREATIONDATE AS CREATIONDATE,
        NULL AS COMMERCIALLINENAME,
        NULL AS FRANCHISENAME,
        NULL AS DIVISIONNAME,
        NULL AS CORPORATIONNAME,
        NULL AS SUBSEGMENTNAME,
        NULL AS SEGMENTNAME,
        NULL AS SUBCATEGORYNAME,
        NULL AS CATEGORYNAME,
        SYS_DATE_CREATE
    FROM
        SILVER_LAYER.DIM_PRC_GENERIC_PRODUCT_SLV
) S ON S.PRCPCSGENERICPRODUCTINTKEY = T.PRCPCSGENERICPRODUCTINTKEY
WHEN MATCHED AND S.SYS_DATE_CREATE > T.SYS_DATE_UPDATE THEN 
    UPDATE SET
        T.PRCPCSGENERICPRODUCTINTKEY = S.PRCPCSGENERICPRODUCTINTKEY,
        T.APUKCODE = S.APUKCODE,
        T.APUKHOUSESWITCHCODE = S.APUKHOUSESWITCHCODE,
        T.APUKHOUSESWITCHDATE = S.APUKHOUSESWITCHDATE,
        T.SHORTNAME = S.SHORTNAME,
        T.ISINTERNAL = S.ISINTERNAL,
        T.PRICINGREFCODE = S.PRICINGREFCODE,
        T.ISINNOVATION = S.ISINNOVATION,
        T.SIZE = S.SIZE,
        T.UNIT = S.UNIT,
        T.PANELCOMMERCIALLINEKEY = S.PANELCOMMERCIALLINEKEY,
        T.PANELSUBSEGMENTKEY = S.PANELSUBSEGMENTKEY,
        T.ISACTIVE = S.ISACTIVE,
        T.LOGDESCRIPTION = S.LOGDESCRIPTION,
        T.CREATIONDATE = S.CREATIONDATE,
        T.COMMERCIALLINENAME = S.COMMERCIALLINENAME,
        T.FRANCHISENAME = S.FRANCHISENAME,
        T.DIVISIONNAME = S.DIVISIONNAME,
        T.CORPORATIONNAME = S.CORPORATIONNAME,
        T.SUBSEGMENTNAME = S.SUBSEGMENTNAME,
        T.SEGMENTNAME = S.SEGMENTNAME,
        T.SUBCATEGORYNAME = S.SUBCATEGORYNAME,
        T.CATEGORYNAME = S.CATEGORYNAME,
        T.SYS_DATE_UPDATE = CURRENT_TIMESTAMP
WHEN NOT MATCHED THEN INSERT (
    PRCPCSGENERICPRODUCTINTKEY,
    APUKCODE,
    APUKHOUSESWITCHCODE,
    APUKHOUSESWITCHDATE,
    SHORTNAME,
    ISINTERNAL,
    PRICINGREFCODE,
    ISINNOVATION,
    SIZE,
    UNIT,
    PANELCOMMERCIALLINEKEY,
    PANELSUBSEGMENTKEY,
    ISACTIVE,
    LOGDESCRIPTION,
    CREATIONDATE,
    COMMERCIALLINENAME,
    FRANCHISENAME,
    DIVISIONNAME,
    CORPORATIONNAME,
    SUBSEGMENTNAME,
    SEGMENTNAME,
    SUBCATEGORYNAME,
    CATEGORYNAME,
    SYS_DATE_CREATE,
    SYS_DATE_UPDATE
)
VALUES (
    S.PRCPCSGENERICPRODUCTINTKEY,
    S.APUKCODE,
    S.APUKHOUSESWITCHCODE,
    S.APUKHOUSESWITCHDATE,
    S.SHORTNAME,
    S.ISINTERNAL,
    S.PRICINGREFCODE,
    S.ISINNOVATION,
    S.SIZE,
    S.UNIT,
    S.PANELCOMMERCIALLINEKEY,
    S.PANELSUBSEGMENTKEY,
    S.ISACTIVE,
    S.LOGDESCRIPTION,
    S.CREATIONDATE,
    S.COMMERCIALLINENAME,
    S.FRANCHISENAME,
    S.DIVISIONNAME,
    S.CORPORATIONNAME,
    S.SUBSEGMENTNAME,
    S.SEGMENTNAME,
    S.SUBCATEGORYNAME,
    S.CATEGORYNAME,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
);

---------------------------------------------------
--------------------------------------------------------------------------
---------------------------------------------------

create or replace task ORCHESTRATION_SCHEMA.GLD_CURATE_PRC_GEOGRAPHY
	warehouse={{ ENVIRONMENT }}_WH
	after ORCHESTRATION_SCHEMA.SLV_CLEAN_PRC_GEOGRAPHY
	as MERGE INTO GOLD_LAYER.DIM_PRC_GEOGRAPHY_GLD T USING (
    SELECT
        PRICINGGEOGRAPHYPRCINTKEY AS PrcPcsGeographyIntkey,
        IDGEO AS IDGEO,
        IDGEONAME AS IDGEONAME,
        AGUKCODE AS AGUKCODE,
        SOURCE AS SOURCE,
        SYS_DATE_CREATE
    FROM
        SILVER_LAYER.DIM_PRC_GEOGRAPHY_SLV
) S ON S.PrcPcsGeographyIntkey = T.PrcPcsGeographyIntkey
WHEN MATCHED AND S.SYS_DATE_CREATE > T.SYS_DATE_UPDATE THEN 
    UPDATE SET
        T.PrcPcsGeographyIntkey = S.PrcPcsGeographyIntkey,
        T.IDGEO = S.IDGEO,
        T.IDGEONAME = S.IDGEONAME,
        T.AGUKCODE = S.AGUKCODE,
        T.SOURCE = S.SOURCE,
        T.SYS_DATE_UPDATE = CURRENT_TIMESTAMP
WHEN NOT MATCHED THEN INSERT (
    PrcPcsGeographyIntkey,
    IDGEO,
    IDGEOName,
    AgukCode,
    SOURCE,
    SYS_DATE_CREATE,
    SYS_DATE_UPDATE
)
VALUES (
    S.PrcPcsGeographyIntkey,
    S.IDGEO,
    S.IDGEOName,
    S.AgukCode,
    S.SOURCE,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
);
